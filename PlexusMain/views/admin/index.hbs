<div class="container">
    <div class="row">
<div class="cd-tabs">
    <nav>
        <ul class="cd-tabs-navigation">
            <li><a data-content="users" class="selected" href="#0"><svg class="icon-contacts-2"><use xlink:href="/fonts/icons.svg#icon-contacts-2"></use></svg><span class="cd-tab-text">{{{__ "Users"}}}<span/></a></li>
            <li><a data-content="roles" href="#0"><svg class="icon-lock-5"><use xlink:href="/fonts/icons.svg#icon-lock-5"></use></svg><span class="cd-tab-text">{{{__ "Roles"}}}<span/></a></li>
        </ul> <!-- cd-tabs-navigation -->
    </nav>
    <ul class="cd-tabs-content">
        <li data-content="users" class="selected row">
    <div class="col-xs-12 col-sm-12 col-md-12 col-mlg12 horizontaltab-form well">
        <form class="form-inline" id="user-form" method="POST" action="/create-user">
          <div class="col-xs-12 col-md-6 col-md-6 col-lg-3"> 
            <div class="form-group">
              <label class="sr-only" for="user-title">{{{__ "Title"}}}</label>
                <select class="form-control" placeholder="user-title" aria-describedby="user-title" name="user_title" id="user-title">
                  <option value="Ms">{{{__ 'Ms'}}}</option>
                  <option value="Miss">{{{__ 'Miss'}}}</option>
                  <option value="Mrs">{{{__ 'Mrs'}}}</option>
                  <option value="Mr">{{{__ 'Mr'}}}</option>
                  <option value="Master">{{{__ 'Master'}}}</option>
                  <option value="Rev">{{{__ 'Rev (Reverend)'}}}</option>
                  <option value="Fr">{{{__ 'Fr (Father)'}}}</option>
                  <option value="Dr">{{{__ 'Dr (Doctor)'}}}</option>
                  <option value="Atty">{{{__ 'Atty (Attorney)'}}}</option>
                  <option value="Prof">{{{__ 'Prof (Professor)'}}}</option>
                  <option value="Hon">{{{__ 'Hon (Honorable)'}}}</option>
                  <option value="Pres">{{{__ 'Pres (President)'}}}</option>
                  <option value="Gov">{{{__ 'Gov (Governor)'}}}</option>
                  <option value="Coach">{{{__ 'Coach'}}}</option>
                  <option value="Ofc">{{{__ 'Ofc (Officer)'}}}</option>
                </select>
            </div>
          </div>
          <div class="col-xs-12 col-md-6 col-md-6 col-lg-3"> 
            <div class="form-group">
              <label class="sr-only" for="user-surname">{{{__ "Surname"}}}</label>
                  <input type="text" class="form-control" id="user-surname" name="user_surname" placeholder="{{{__ "Surname"}}}">
            </div>
          </div>
          <div class="col-xs-12 col-md-6 col-md-6 col-lg-3"> 
            <div class="form-group">
              <label class="sr-only" for="user-middlename">{{{__ "Middlename"}}}</label>
                  <input type="text" class="form-control" id="user-middlename" name="user_middlename" placeholder="{{{__ "Middlename"}}}">
            </div>
          </div>
          <div class="col-xs-12 col-md-6 col-md-6 col-lg-3"> 
            <div class="form-group">
              <label class="sr-only" for="user-lastname">{{{__ "Lastname"}}}</label>
                  <input type="text" class="form-control" id="user-lastname" name="user_lastname" placeholder="{{{__ "Lastname"}}}">
            </div>
          </div>
          <div class="col-xs-12 col-md-6 col-md-6 col-lg-3"> 
            <div class="form-group">
              <label class="sr-only" for="user-maidenname">{{{__ "Maidenname"}}}</label>
                  <input type="text" class="form-control" id="user-maidenname" name="user_maidenname" placeholder="{{{__ "Maidenname"}}}">
            </div>
          </div>

          <div class="col-xs-12 col-md-6 col-md-6 col-lg-3">    
          <div class="form-group">
            <label class="sr-only" for="user-email">{{{__ "Email"}}}</label>
                <input type="email" class="form-control" id="user-email" name="user_email" placeholder="{{{__ 'Email'}}}">
         </div>
          </div>
          <div class="col-xs-8 col-sm-8 col-md-8 col-lg-2">   
         <div class="form-group">
            <label class="sr-only" for="user-role">{{{__ "Role"}}}</label>
                <select class="form-control" id="user-role" name="user_role">
                   {{#each roles}}
                      <option value="{{this.id}}">{{this.key.name}}</option>                      
                    {{/each}}
                </select>
        </div>
          </div>
          <div class="col-xs-4 col-sm-4 col-md-2 col-lg-2"> 
         <div class="form-group">
          <div class="switch">
            <input id="checkbox-toggle" name="user_accepted" class="checkbox-toggle checkbox-toggle-yes-no" type="checkbox">
            <label  id="togglecheckboxs" for="checkbox-toggle"  data-on="{{{__ 'Accepted'}}}" data-off="{{{__ 'Blocked'}}}"></label>
          </div>
         </div>
          </div>
          <div class="col-xs-4 col-sm-4 col-md-2 col-lg-2">
          <div class="form-group">
                <div class="btn-group-sm btn-group" style="width:100%" role="group" aria-label="Save">
                  <button type="reset" id="btn-resetUser" class="col-xs-6 col-sm-6 col-md-6 col-lg-6 btn btn-primary">{{{__ "Reset"}}}</button>
                  <button type="submit" id="btn-saveUser" class="col-xs-6 col-sm-6 col-md-6 col-lg-6 btn btn-primary">{{{__ "Save"}}}</button>
                </div>
            </div> 
          </div>
        </form>  
    </div>
           <br>
        <div class="table-responsive col-xs-12 col-sm-12 col-md-12 col-lg-12 table-hover table-striped">    
            <table width="100%" class="display table" id="users-management" class="" cellspacing="0">
                <thead>
                    <tr>
                        <th></th>
                        <th>{{{__ "Name"}}}</th>
                        <th>{{{__ "Email"}}}</th>
                        <th>{{{__ "Role"}}}</th>
                        <th>{{{__ "Status"}}}</th>
                        <th>{{{__ "Mail"}}}</th>
                        <th>{{{__ "Modify"}}}</th>
                        <th>{{{__ "Trash"}}}</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>  



        </li>
        <li data-content="roles" class="row">
        <div class="col-md-12 horizontaltab-form well">
            <form class="form-inline" action="/create-role" id="role-form" method="POST">
              <div class="col-xs-12 col-sm-12 col-md-12 col-lg-6">
              <div class="form-group">
                <label class="sr-only" for="role-name">{{{__ "Rolename"}}}</label>
                    <input type="text" class="form-control" name="role_name" id="role-name" placeholder="{{{__ 'Rolename'}}}">
              </div>
              </div>
              <div class="col-xs-12 col-sm-6 col-md-4 col-lg-2">
                <div class="switch">
                  <input name="role_read" id="role-read" class="checkbox-toggle checkbox-toggle-yes-no" type="checkbox">
                  <label  id="togglecheckboxs" for="role-read" data-on="{{{__ 'Can Read'}}}" data-off="{{{__ 'No Reading'}}}" ></label>
                </div>
              </div>
              <div class="col-xs-12 col-sm-6 col-md-4 col-lg-2">
                <div class="switch">
                  <input name="role_write" id="role-write" class="checkbox-toggle checkbox-toggle-yes-no" type="checkbox">
                  <label  id="togglecheckboxs" for="role-write" data-on="{{{__ 'Can Write'}}}" data-off="{{{__ 'No Writing'}}}" ></label>
                </div>
              </div>
              <div class="col-xs-12 col-sm-6 col-md-4 col-lg-2">
                <div class="switch">
                  <input name="role_edit" id="role-edit" class="checkbox-toggle checkbox-toggle-yes-no" type="checkbox">
                  <label  id="togglecheckboxs" for="role-edit" data-on="{{{__ 'Can Edit'}}}" data-off="{{{__ 'No Editing'}}}" ></label>
                </div>
              </div>
              <div class="col-xs-12 col-sm-6 col-md-4 col-lg-2">
                <div class="switch">
                  <input name="role_publish" id="role-publish" class="checkbox-toggle checkbox-toggle-yes-no" type="checkbox">
                  <label  id="togglecheckboxs" for="role-publish" data-on="{{{__ 'Can Publish'}}}" data-off="{{{__ 'No Publishing'}}}" ></label>
                </div>
              </div>
              <div class="col-xs-12 col-sm-6 col-md-4 col-lg-2">
                <div class="switch">
                  <input name="role_del" id="role-delete" class="checkbox-toggle checkbox-toggle-yes-no" type="checkbox">
                  <label  id="togglecheckboxs" for="role-delete" data-on="{{{__ 'Can Delete'}}}" data-off="{{{__ 'No Deleting'}}}" ></label>
                </div>
              </div>
              <div class="col-xs-12 col-sm-6 col-md-4 col-lg-2">
              <div class="form-group">
                <div class="btn-group-sm btn-group" style="width:100%" role="group" aria-label="Save">
                  <button type="reset" id="btn-resetRole" class="col-xs-6 col-sm-6 col-md-6 col-lg-6 btn btn-primary">{{{__ "Reset"}}}</button>
                  <button type="submit" id="btn-saveRole" class="col-xs-6 col-sm-6 col-md-6 col-lg-6 btn btn-primary">{{{__ "Save"}}}</button>
                </div>
              </div>
                </div> 
            </form> 
        </div>
        <br>
        <div class="table-responsive col-xs-12 col-sm-12 col-md-12 col-lg-12 table-hover table-striped">    
            <table width="100%" class="display table" id="roles-management" cellspacing="0">
                <thead>
                    <tr>
                        <th>{{{__ "Name"}}}</th>
                        <th>{{{__ "Read"}}}</th>
                        <th>{{{__ "Write"}}}</th>
                        <th>{{{__ "Edit"}}}</th>
                        <th>{{{__ "Delete"}}}</th>
                        <th>{{{__ "Publish"}}}</th>
                        <th>{{{__ "Modify"}}}</th>
                        <th>{{{__ "Trash"}}}</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>  
        </li>
    </ul> <!-- cd-tabs-content -->
</div> <!-- cd-tabs -->


<!-- Modal -->
<div id="mailUserModal" class="modal fade" role="dialog">
  <div class="modal-dialog">
    <!-- Modal content-->
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&times;</button>
        <h4 class="modal-title">{{{__ "Send Message"}}}</h4>
      </div>
      <div class="modal-body">
        <div class="row">
        <p>{{{__ "Write your email below, the mail wich is send will be optimized for spam filters"}}}</p>
        </div>
        <div class="row">
            <input type="hidden" id="userMailTo" class="form-control">
            <input type="text" id="userMailSubject" class="form-control" placeholder="{{{__ 'Subject'}}}">
            <br>
        </div>
        <div class="row">
            <textarea id="userMailText"></textarea>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">{{{__ "Reset"}}}</button>
        <button type="button" id="sendMailToUser" class="btn btn-primary" data-dismiss="modal">{{{__ "Send"}}}</button>
      </div>
    </div>

  </div>
</div>
<script type="text/javascript">
function isUndef(val) {
    if (val === undefined) {
        return "";
    } else {
        return val;
    }
}

function upChar(namestring) {
    if (namestring === undefined) {
        return "";
    } else {
        return namestring.charAt(0).toUpperCase() + ".";
    }
}

function isChecked(val) {
    if (val === 'on' || val == 1 || val == '1') {
        return true;
    } else {
        return false;
    }
}

function setUid(e) {
    $('#userMailTo').val($(e).attr('data-uid'));
}
jQuery(document).ready(function($) {
    // User management
    function format(d) {
        if (d.key.birthday != undefined) {
            var birthday = new Date(d.key.birthday);
        }
        if (d.key.address === undefined) {
            var street = "";
            var postalcode = "";
            var city = "";
            var country = "";
        } else {
            var street = isUndef(d.key.address.street);
            var postalcode = isUndef(d.key.address.postalcode);
            var city = isUndef(d.key.address.city);
            var country = isUndef(d.key.address.country);
        }
        if (d.key.avatar.length <= 0) {
            var avatar = '<svg class="icon-id-8" style="height:100%; width:100%;"><use xlink:href="/fonts/icons.svg#icon-id-8"></use></svg>';
        } else {
            var avatar = '<img width="90px" src="/uploads/avatar/' + d.key.avatar + '" class="img-responive img-polaroid"/>';
        }
        switch (d.key.gender) {
            case "male":
                var gender = '<svg class="icon-gender-male"><use xlink:href="fonts/icons.svg#icon-gender-male"></use></svg>';
                break;

            case "female":
                var gender = '<svg class="icon-gender-female"><use xlink:href="fonts/icons.svg#icon-gender-female"></use></svg>';
                break;

            case "intersex":
                var gender = '<svg class="icon-genders"><use xlink:href="fonts/icons.svg#icon-genders"></use></svg>';
                break;

            default:
                var gender = "";
                break;
        }
        return '<table style="color:#ffffff; margin-bottom:-0px;" class="display table" cellspacing="0">' + '<tr style="background-color:#384B5F;">' + '<td rowspan="3" width="90px">' + avatar + "</td>" + '<td style="width:20px"><svg class="icon-house-2"><use xlink:href="fonts/icons.svg#icon-house-2"></use></svg></td>' + '<td colspan="4">' + street + ", " + postalcode + " " + city + " " + country + "</td>" + '<td style="width:20px">' + isUndef(gender) + "</td>" + "<td>" + "</td>" + "</tr>" + '<tr style="background-color:#384B5F;">' + '<td style="width:20px"><svg class="icon-globe-1"><use xlink:href="fonts/icons.svg#icon-globe-1"></use></svg></td>' + '<td colspan="4">' + isUndef(d.key.website) + "</td>" + '<td style="width:20px"><svg class="icon-cake-2"><use xlink:href="fonts/icons.svg#icon-cake-2"></use></svg></td>' + "<td>" + birthday.getDay() + '-' + birthday.getMonth() + '-' + birthday.getFullYear() + "</td>" + "</tr>" + '<tr style="background-color:#384B5F;">' + '<td style="width:20px"><svg class="icon-phone-3"><use xlink:href="fonts/icons.svg#icon-phone-3"></use></svg></td>' + '<td colspan="4">' + isUndef(d.key.phone) + "</td>" + '<td style="width:20px"><svg class="icon-mobile-phone-1"><use xlink:href="fonts/icons.svg#icon-mobile-phone-1"></use></svg></td>' + "<td>" + isUndef(d.key.mobile) + "</td>" + "</tr>" + "</table>";
    }
    var usersTable = $("#users-management").DataTable({
        serverSide: true,
        processing: true,
        ajax: {
            url: "/get_users",
            type: "POST"
        },
        columns: [{
            className: "details-control",
            data: "key.surname",
            render: function(data, type, full, meta) {
                return "";
            }
        }, {
            data: "key",
            render: function(data, type, full, meta) {
                if (data.maidenname === undefined || data.maidenname === "") {
                    return isUndef(data.title) + " " + upChar(data.surname) + "" + upChar(data.middlename) + " " + isUndef(data.lastname);
                } else {
                    return isUndef(data.title) + " " + upChar(data.surname) + "" + upChar(data.middlename) + " " + isUndef(data.lastname) + " - " + data.maidenname;
                }
            }
        }, {
            data: "key.email"
        }, {
            data: "key.role",
            orderable: false,
            searchable: false,
            render: function(data, type, full, meta) {
                if (data === undefined) {
                    return "User";
                } else {
                    return data.text;
                }
            }
        }, {
            data: "key.acl.status",
            render: function(data, type, full, meta) {
                if (data === "0") {
                    return "{{{__ 'Waiting'}}}";
                } else {
                    return "{{{__ 'Validated'}}}";
                }
            }
        }, {
            data: "key.uid",
            orderable: false,
            searchable: false,
            render: function(data, type, full, meta) {
                return '<button class="btn btn-mini btn-primary" data-toggle="modal" onclick="setUid(this)" data-uid="' + data + '" data-target="#mailUserModal"><svg class="icon-mail-2"><use xlink:href="fonts/icons.svg#icon-mail-2"></use></svg></button>';
            }
        }, {
            data: "key.uid",
            orderable: false,
            searchable: false,
            render: function(data, type, full, meta) {
                return '<button class="btn btn-mini btn-warning editUser" id="' + data + '"><svg class="icon-edit-3"><use xlink:href="fonts/icons.svg#icon-edit-3"></use></svg></button>';
            }
        }, {
            data: "key.uid",
            orderable: false,
            searchable: false,
            render: function(data, type, full, meta) {
                return '<button class="btn btn-mini btn-danger dropUser" id="' + data + '" data-text="{{{__ "Are you sure to remove this user?"}}}"><svg class="icon-bin-2"><use xlink:href="fonts/icons.svg#icon-bin-2"></use></svg></button>';
            }
        }]
    });
    // Add event listener for opening and closing details
    $("#users-management tbody").on("click", "td.details-control", function() {
        var tr = $(this).closest("tr");
        var row = usersTable.row(tr);
        if (row.child.isShown()) {
            // This row is already open - close it
            row.child.hide();
            tr.removeClass("shown");
        } else {
            // Open this row
            row.child(format(row.data())).show();
            tr.addClass("shown");
        }
    });
    var rolesTable = $("#roles-management").DataTable({
        serverSide: true,
        processing: true,
        ajax: {
            url: "/get_roles",
            type: "POST"
        },
        columns: [{
            data: "key.name",
            searchable: true
        }, {
            data: "key.read",
            searchable: true,
            render: function(data, type, full, meta) {
                if (data === undefined || data === 0) {
                    return '<svg style="fill:red;" class="icon-cross-shield"><use xlink:href="fonts/icons.svg#icon-cross-shield"></use></svg>';
                } else {
                    return '<svg style="fill:green;" class="icon-check-shield"><use xlink:href="fonts/icons.svg#icon-check-shield"></use></svg>';
                }
            }
        }, {
            data: "key.write",
            searchable: true,
            render: function(data, type, full, meta) {
                if (data === undefined || data === 0) {
                    return '<svg style="fill:red;" class="icon-cross-shield"><use xlink:href="fonts/icons.svg#icon-cross-shield"></use></svg>';
                } else {
                    return '<svg style="fill:green;" class="icon-check-shield"><use xlink:href="fonts/icons.svg#icon-check-shield"></use></svg>';
                }
            }
        }, {
            data: "key.edit",
            searchable: false,
            render: function(data, type, full, meta) {
                if (data === undefined || data === 0) {
                    return '<svg style="fill:red;" class="icon-cross-shield"><use xlink:href="fonts/icons.svg#icon-cross-shield"></use></svg>';
                } else {
                    return '<svg style="fill:green;" class="icon-check-shield"><use xlink:href="fonts/icons.svg#icon-check-shield"></use></svg>';
                }
            }
        }, {
            data: "key.delete",
            searchable: false,
            render: function(data, type, full, meta) {
                if (data === undefined || data === 0) {
                    return '<svg style="fill:red;" class="icon-cross-shield"><use xlink:href="fonts/icons.svg#icon-cross-shield"></use></svg>';
                } else {
                    return '<svg style="fill:green;" class="icon-check-shield"><use xlink:href="fonts/icons.svg#icon-check-shield"></use></svg>';
                }
            }
        }, {
            data: "key.publish",
            searchable: false,
            render: function(data, type, full, meta) {
                if (data === undefined || data === 0) {
                    return '<svg style="fill:red;" class="icon-cross-shield"><use xlink:href="fonts/icons.svg#icon-cross-shield"></use></svg>';
                } else {
                    return '<svg style="fill:green;" class="icon-check-shield"><use xlink:href="fonts/icons.svg#icon-check-shield"></use></svg>';
                }
            }
        }, {
            data: "key.uid",
            orderable: false,
            searchable: false,
            render: function(data, type, full, meta) {
                return '<button class="btn btn-mini btn-warning editRole" id="' + data + '"><svg class="icon-edit-3"><use xlink:href="fonts/icons.svg#icon-edit-3"></use></svg></button>';
            }
        }, {
            data: "key.uid",
            orderable: false,
            searchable: false,
            render: function(data, type, full, meta) {
                return '<button class="btn btn-mini btn-danger dropRole" id="' + data + '" data-text="{{{__ "Are you sure to remove this role?"}}}"><svg class="icon-bin-2"><use xlink:href="fonts/icons.svg#icon-bin-2"></use></svg></button>';
            }
        }]
    });
    //UserMailText
    $("#userMailText").summernote({
        toolbar: [
            ["style", ["bold", "italic", "underline", "clear"]],
            ["font", ["strikethrough", "superscript", "subscript"]],
            ["fontsize", ["fontsize"]],
            ["insert", ["hr", "table"]],
            ["color", ["color"]],
            ["para", ["ul", "ol", "paragraph"]],
            ["height", ["height"]],
            ["misc", ["fullscreen"]]
        ],
        height: 300
    });
    $(document).on("click", "#btn-saveUser", function(event) {
        event.preventDefault();
        var data = $("#user-form").serialize();
        var path = $("#user-form").attr("action");

        if ($('[name=user_email]').val() == null || $('[name=user_email]').val() == '') {
            $.notify({
                title: '{{{__ "Empty email?!"}}}',
                message: '{{{__ "Email can not be empty!"}}}',
                url: null,
                target: null
            }, {
                type: 'warning'
            });
        } else {
            $.ajax({
                url: path,
                type: "POST",
                data: data
            }).done(function(data) {


                if (data.message.type != "danger" && data.message.type != "warning") {
                    var table = $("#users-management").DataTable();
                    table.row.add({
                        key: {
                            surname: data.user.data.surname,
                            email: data.user.data.email,
                            role: data.user.data.role,
                            acl: data.user.data.acl,
                            uid: data.user.data.uid,
                            uid: data.user.data.uid,
                            uid: data.user.data.uid
                        }
                    }).draw();
                }
                $.notify({
                    title: data.message.title,
                    message: data.message.msg,
                    url: data.message.url,
                    target: data.message.target
                }, {
                    type: data.message.type
                });
            });
        }
    });
    $(document).on("click", "#btn-saveRole", function(event) {
        event.preventDefault();
        var data = $("#role-form").serialize();
        var path = $("#role-form").attr("action");
        $.ajax({
            url: path,
            type: "POST",
            data: data
        }).done(function(data) {
            if (data.message.type != "danger" && data.message.type != "warning") {
                var table = $("#roles-management").DataTable();
                table.row.add({
                    key: {
                        name: data.role.name,
                        read: data.role.read,
                        write: data.role.write,
                        edit: data.role.edit,
                        "delete": data.role.delete,
                        publish: data.role.publish,
                        uid: data.role.uid,
                        uid: data.role.uid
                    }
                }).draw();
                $("#user-role").append($("<option></option>").val(data.role.uid).html(data.role.name));
            }
            $.notify({
                title: data.message.title,
                message: data.message.msg,
                url: data.message.url,
                target: data.message.target
            }, {
                type: data.message.type
            });
        });
    });
    //Get User for editing
    $(document).on("click", ".editUser", function(e) {
        $.ajax({
            url: "/get-user/" + this.id,
            type: "POST",
            dataType: "JSON"
        }).done(function(data) {
            $("#user-form").attr("action", "/update-user/" + data.uid);
            $("[name=user_accepted]").prop("checked", isChecked(data.acl.status));
            $("#user-id").val(data.uid);
            $("#btn-saveUser").removeClass("btn-primary").addClass("btn-warning").html("{{{__ 'Update'}}}");
            $("#user-title").val(data.title);
            $("#user-surname").val(data.surname);
            $("#user-middlename").val(data.middlename);
            $("#user-lastname").val(data.lastname);
            $("#user-maidenname").val(data.maidenname);
            $("#user-email").val(data.email);
            $("#user-role").val(data.role.uid);
        }).fail(function() {
            console.log("error");
        });
    });
    $(document).on("click", "#btn-resetUser", function(e) {
        $("#user-form").attr("action", "/create-user/");
        $("#btn-saveUser").removeClass("btn-warning").addClass("btn-primary").html("{{{__ 'Save'}}}");
    });
    $(document).on("click", "#btn-resetRole", function(e) {
        $("#role-form").attr("action", "/create-role/");
        $("#btn-saveRole").removeClass("btn-warning").addClass("btn-primary").html("{{{__ 'Save'}}}");
    });
    $(document).on("click", ".dropUser", function(e) {
        var text = $(this).attr("data-text");
        var id = $(this).attr("id");
        var row = $(this).parents("tr");
        var subrow = $(this).parents("tr").next('tr');

        bootbox.confirm(text, function(result) {
            if (result) {
                $.ajax({
                    url: "/delete-user/" + id,
                    type: "POST"
                }).done(function(data) {
                    if (data.message.type != "danger" && data.message.type != "warning") {
                        var table = $("#users-management").DataTable();
                        table.row(row).node().remove();

                        if ($(subrow).attr('role') == undefined) {
                            $(subrow).remove();
                        }
                    }
                    $.notify({
                        title: data.message.title,
                        message: data.message.msg,
                        url: data.message.url,
                        target: data.message.target
                    }, {
                        type: data.message.type
                    });
                }).fail(function(data) {
                    $.notify({
                        title: data.message.title,
                        message: data.message.msg,
                        url: data.message.url,
                        target: data.message.target
                    });
                });
            }
        });
    });
    $(document).on("click", ".dropRole", function(e) {
        var text = $(this).attr("data-text");
        var id = $(this).attr("id");
        var row = $(this).parents("tr");
        bootbox.confirm(text, function(result) {
            if (result) {
                $.ajax({
                    url: "/delete-role/" + id,
                    type: "POST"
                }).done(function(data) {
                    if (data.message.type != "danger" && data.message.type != "warning") {
                        var table = $("#roles-management").DataTable();
                        table.row(row).node().remove();
                        $("#user-role option[value='" + id + "']").remove();
                    }
                    $.notify({
                        title: data.message.title,
                        message: data.message.msg,
                        url: data.message.url,
                        target: data.message.target
                    }, {
                        type: data.message.type
                    });
                }).fail(function(data) {
                    $.notify({
                        title: data.message.title,
                        message: data.message.msg,
                        url: data.message.url,
                        target: data.message.target
                    }, {
                        type: data.message.type
                    });
                });
            }
        });
    });
    //Get User for editing
    $(document).on("click", ".editRole", function(e) {
        $.ajax({
            url: "/get-role/" + this.id,
            type: "POST",
            dataType: "JSON"
        }).done(function(d) {
            var data = d[0].value;
            $("#role-form").attr("action", "/update-role/" + data.uid);
            $("#btn-saveRole").removeClass("btn-primary").addClass("btn-warning").html("{{{__ 'Update'}}}");
            $("[name=role_name]").val(data.name);
            $("[name=role_read]").prop("checked", isChecked(data.read));
            $("[name=role_write]").prop("checked", isChecked(data.write));
            $("[name=role_edit]").prop("checked", isChecked(data.edit));
            $("[name=role_publish]").prop("checked", isChecked(data.publish));
            $("[name=role_del]").prop("checked", isChecked(data.delete));
        }).fail(function() {
            console.log("error");
        });
    });
    $(document).on('click', '#sendMailToUser', function(event) {
        event.preventDefault();
        var body = encodeURIComponent($('#userMailText').val());
        var to = $('#userMailTo').val();
        var subject = $('#userMailSubject').val();

        $.ajax({
            url: '/sendmail',
            type: 'POST',
            data: {
                'to': to,
                'subject': subject,
                'body': body
            }
        })
            .done(function(data) {
                $.notify({
                    title: data.message.title,
                    message: data.message.msg,
                    url: data.message.url,
                    target: data.message.target
                }, {
                    type: data.message.type
                });
            })
            .fail(function(data) {
                $.notify({
                    title: data.message.title,
                    message: data.message.msg,
                    url: data.message.url,
                    target: data.message.target
                }, {
                    type: data.message.type
                });
            });
    });
});
</script>